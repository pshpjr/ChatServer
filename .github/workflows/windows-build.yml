name: Windows C++ Build and Release

on:
  push:
    branches:
      - pshpjr-patch-1
  pull_request:
    branches:
      - pshpjr-patch-1
  release:
    types: [created]

jobs:
  build:

    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install dependencies
        run: |
          choco install cmake -y
          choco install ninja -y

      - name: Install vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.bat

      # CMake Configure with vcpkg-configuration.json
      - name: Configure CMake (Debug)
        run: cmake -B build/debug -G "Ninja" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake

      - name: Build (Debug)
        run: cmake --build build/debug --config Debug

      # 릴리즈 빌드
      - name: Configure CMake (Release)
        run: cmake -B build/release -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake

      - name: Build (Release)
        run: cmake --build build/release --config Release

      # 테스트 실행
      - name: Run Tests (Debug)
        run: ctest --test-dir build/debug --output-on-failure

      - name: Run Tests (Release)
        run: ctest --test-dir build/release --output-on-failure

      # include 디렉터리 및 릴리즈 빌드 파일 아카이브
      - name: Archive Release Build and Include Files
        run: |
          mkdir -p build/artifacts
          cp -r include build/artifacts/
          cp build/release/*.lib build/artifacts/ || echo "No .lib files found"
          cp build/release/*.dll build/artifacts/ || echo "No .dll files found"
          tar -czvf build/release-package.tar.gz -C build/artifacts .

      # GitHub Release에 업로드
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # GitHub Release에 업로드
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: build/release-package.tar.gz
          asset_name: release-package.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
