name: Windows C++ Build and Release

on:
  push:
    branches:
      - master

jobs:
  build_and_release:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

#      - name: Cache MSVC and Dependencies
#        uses: actions/cache@v3
#        with:
#          path: |
#            C:\Program Files (x86)\Microsoft Visual Studio
#            C:\vcpkg
#          key: ms-vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}
#          restore-keys: |
#            ms-vcpkg-${{ runner.os }}-

#      - name: Cache Chocolatey Packages
#        uses: actions/cache@v3
#        with:
#          path: |
#            C:\ProgramData\chocolatey\lib
#            C:\ProgramData\chocolatey\cache
#          key: chocolatey-${{ runner.os }}-${{ hashFiles('**/chocolatey-packages.txt') }}
#          restore-keys: |
#            chocolatey-${{ runner.os }}-

      - name: Install MSVC
        uses: ilammy/msvc-dev-cmd@v1

#      - name: Install Dependencies
#        id: install_dependencies
#        run: |
#          if (-not (Test-Path "C:\ProgramData\chocolatey\lib\cmake")) {
#            choco install cmake -y
#          }
#          if (-not (Test-Path "C:\ProgramData\chocolatey\lib\ninja")) {
#            choco install ninja -y
#          }
#          if (-not (Test-Path "C:\ProgramData\chocolatey\lib\windows-sdk-10.0")) {
#            choco install windows-sdk-10.0 -y
#          }
      - name: Install Dependencies
        id: install_dependencies
        run: |
            choco install cmake -y
            choco install ninja -y
#            choco install windows-sdk-10.0 -y

      - name: Configure CMake And Build (Debug)
        run: |
          cmake -B build/debug -G "Ninja" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
          cmake --build build/debug --config Debug

      - name: Check Debug Result
        run: |
          ls build/debug/
          ls build/debug/CMakeFiles/

      - name: Configure CMake And Build (Release)
        run: |
          cmake -B build/release -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
          cmake --build build/release --config Release

      - name: Run Tests (Debug)
        run: ctest --test-dir build/debug --output-on-failure

      - name: Run Tests (Release)
        run: ctest --test-dir build/release --output-on-failure

      - name: Archive Release Build and Include Files
        run: |
          mkdir -p build/artifacts
          mkdir -p build/artifacts/lib
          mkdir -p build/artifacts/lib/dlls
          cp -r include build/artifacts/
          cp build/debug/*.lib build/artifacts/lib/ || echo "No Debug .lib files found"
          cp build/debug/*.pdb build/artifacts/lib/ || echo "No Debug .pdb files found"
          cp build/release/*.lib build/artifacts/lib/ || echo "No .lib files found"
          cp build/release/*.dll build/artifacts/lib/ || echo "No .dll files found"
          cp lib/dlls/* build/artifacts/lib/dlls/ || echo "No dlls"
          tar -czvf build/release-package.tar.gz -C build/artifacts .

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: release-${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/release-package.tar.gz
          asset_name: release-package.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
